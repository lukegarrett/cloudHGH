Floating IPs:
	team_hgh VM : 129.114.26.85
	AWS VM 01 : ec2-3-137-205-212.us-east-2.compute.amazonaws.com
	AWS VM 02 : ec2-3-22-116-121.us-east-2.compute.amazonaws.com

Commands for Downloading Kafka:
	curl "https://dlcdn.apache.org/kafka/2.8.1/kafka_2.13-2.8.1.tgz" -o ~/serverfiles/kafka.tgz
	mkdir kafka
	cd kafka
	tar -xvzf ~/serverfiles/kafka.tgz --strip 1

Start Zookeeper:
	bin/zookeeper-server-start.sh  config/zookeeper.properties

Start Kafka Service:
	export KAFKA_HEAP_OPTS="-Xmx256M -Xms128M" && rm -fr /tmp/zookeeper/ /tmp/kafka* && bin/kafka-server-start.sh  config/server.properties

Create Topic:
	bin/kafka-topics.sh --create --topic hghdata --bootstrap-server localhost:9092

Describe All Topics:
	bin/kafka-topics.sh --list --bootstrap-server localhost:9092

Describe Specific Topic:
	bin/kafka-topics.sh --describe --topic hghdata --bootstrap-server localhost:9092

Shell Consumer (List Data):
	bin/kafka-console-consumer.sh --topic First_Topic --from-beginning --bootstrap-server localhost:9092

UFW (Linux OS Internal Firewall)
	sudo ufw allow proto tcp from any to any port 9092

Server Configuration:
	Necessary Steps to Configure Kafka Service:
		1) Open Security Group in Chameleon
		2) Allow incoming rule for UFW
		3) Allow incoming connections in server.properties
			listeners=PLAINTEXT://9092
			advertised.listeners=PLAINTEXT://129.114.26.85:9092
		4) Port 2181 needs to be opened for Zookeeper connections
JVM Memory Expansion:
	export KAFKA_HEAP_OPTS="-Xmx256M -Xms128M"

Chamelon API Config File:
	Append /vm3 to url
	Add password field

Ansible Configuration
	Chameleon API Config file should be stored in .config/openstack/clouds.yaml
		/vm3 should be appended to host name
		password field should also be included in JSON
	.ansible directory should be created in root directory
		inventory file should be stored here
	.ansible.cfg file should be stored in root directory

Running Ansible
	ansible MyChameleonVMs -m ping -u cc -i ~/.ansible/MyInventory
		MyChameleonVMs is the alias given in inventory file
			In the inventory file, the Alias is almost like an array of VMs so you can run module commands on a multitude of VMs at once
		-m is the module flag, we are running the ping module
		-u is "who is the user on the other side?" the username is cc
		-i points to inventory file, but can be defaulted by ansible config file
		-a is the argument flag, which passes a string of arguments, such as "path=/home/cc/join_command.txt mode=o+r"
	ansible MyChameleonVMs -u gokhale -m openstack.cloud.server_info -a "cloud=CH-819381 server=gokhale*"
		-u flag is set to gokhale because it is running locally instead of cloud
		CH-819381 comes from yaml file

Read/Write/Execute Flags
	Three bits given to each group: User, Group, Other
	First bit of three is read, second bit of three is write, third bit of three is execute

CouchDB Installation:
	1) Import GPG Key and enable repository
		$ curl -L https://couchdb.apache.org/repo/bintray-pubkey.asc | sudo apt-key add -
		$ echo "deb https://apache.bintray.com/couchdb-deb focal main" | sudo tee -a /etc/apt/sources.list
		$ sudo apt update
		$ sudo apt install couchdb

		Might have to do these too: ( I had issues getting couchdb package accepted, but never had to allow unsigned packages)
			sudo apt update && sudo apt install -y curl apt-transport-https gnupg
			curl https://couchdb.apache.org/repo/keys.asc | gpg --dearmor | sudo tee /usr/share/keyrings/couchdb-archive-keyring.gpg >/dev/null 2>&1
			source /etc/os-release
			echo "deb [signed-by=/usr/share/keyrings/couchdb-archive-keyring.gpg] https://apache.jfrog.io/artifactory/couchdb-deb/ ${VERSION_CODENAME} main" \
   		 		| sudo tee /etc/apt/sources.list.d/couchdb.list >/dev/null

	2) Setup in Standalone mode.
		username: "admin"
		password: "teamhgh"
	3) Set Binding Address to 0.0.0.0
	4) CouchDB can now be accessed remotely
	5) You can also use these commands for starting/stopping/checking status
		$ sudo systemctl start couchdb.service
		$ sudo systemctl enable couchdb.service
		$ sudo systemctl stop couchdb.service
		$ sudo systemctl status couchdb.service

Notes:
	Each Kafka broker must have unique 'broker.id' in server.properties






